import net.silentlycrashing.gestures.*;import net.silentlycrashing.gestures.preset.*;GestureAnalyzer brain;ConcurrentGestureListener boxListener;ConcurrentHShakeListener shakeListener;int numBoxes = 0;SimplePoint[] boxes;void setup() {    // initialize the gesture listeners    size(500, 500, P3D);    lights();   boxes = new SimplePoint[100];brain = new MouseGestureAnalyzer(this);    brain.setVerbose(true);boxListener = new ConcurrentGestureListener(this, brain, "(RDLU)$");    boxListener.registerOnAction("createBox", this);shakeListener = new ConcurrentHShakeListener(this, brain);    shakeListener.registerOnAction("shakeHeard", this);}void draw() {// line(pmouseX, pmouseY, mouseX, mouseY);    background(122);    int i;camera(0.0, mouseY, 0, // eyeX, eyeY, eyeZ         width/2, height/2, 0.0, // centerX, centerY, centerZ         0.0, 1.0, 0.0); // upX, upY, upZHere, the translate() method sets the location where the box will be drawn, and the s property of the SimplePoint is used to determine the size of the box:    for( i = 0; i<numBoxes; i++) {       pushMatrix();           translate(width/2 - 100, height/2 - 100, 0);           translate(boxes[i].x, boxes[i].y, boxes[i].z);           box(boxes[i].s);       popMatrix();    }}void createBox() {    SimplePoint p = new SimplePoint();    p.x = random(100);    p.y = random(100);    p.z = random(50);    p.s = random(40);    boxes[numBoxes] = p;    numBoxes++;}void shakeHeard() {    println(" shaken ");    numBoxes = 0;}class SimplePoint {    float x;    float y;    float s;    float z;}